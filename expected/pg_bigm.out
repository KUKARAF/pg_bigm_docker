CREATE EXTENSION pg_bigm;
\pset null '(null)'
SET standard_conforming_strings = on;
SET escape_string_warning = off;
SET enable_seqscan = off;
SET pg_bigm.enable_recheck = on;
SET pg_bigm.gin_key_limit = 0;
-- tests for pg_bigm.last_update
SHOW pg_bigm.last_update;
 pg_bigm.last_update 
---------------------
 2013.04.05
(1 row)

SET pg_bigm.last_update = '2013.09.18';
ERROR:  parameter "pg_bigm.last_update" cannot be changed
-- tests for likequery
SELECT likequery(NULL);
 likequery 
-----------
 (null)
(1 row)

SELECT likequery('');
 likequery 
-----------
 (null)
(1 row)

SELECT likequery('aBc023#*^&');
  likequery   
--------------
 %aBc023#*^&%
(1 row)

SELECT likequery('ポスグレの全文検索');
      likequery       
----------------------
 %ポスグレの全文検索%
(1 row)

SELECT likequery('\_%');
 likequery 
-----------
 %\\\_\%%
(1 row)

SELECT likequery('pg_bigmは検索性能を200%向上させました。');
                  likequery                  
---------------------------------------------
 %pg\_bigmは検索性能を200\%向上させました。%
(1 row)

-- tests for show_bigm
SELECT show_bigm(NULL);
 show_bigm 
-----------
 (null)
(1 row)

SELECT show_bigm('');
 show_bigm 
-----------
 {}
(1 row)

SELECT show_bigm('i');
  show_bigm  
-------------
 {" i","i "}
(1 row)

SELECT show_bigm('ab');
   show_bigm    
----------------
 {" a",ab,"b "}
(1 row)

SELECT show_bigm('aBc023$&^');
              show_bigm              
-------------------------------------
 {" a",$&,&^,02,23,3$,Bc,"^ ",aB,c0}
(1 row)

SELECT show_bigm('\_%');
       show_bigm       
-----------------------
 {" \\","% ","\\_",_%}
(1 row)

SELECT show_bigm('pg_bigm improves performance by 200%');
                                                            show_bigm                                                            
---------------------------------------------------------------------------------------------------------------------------------
 {" 2"," b"," i"," p","% ",0%,00,20,_b,an,bi,by,ce,"e ",er,es,fo,g_,gm,ig,im,"m ",ma,mp,nc,or,ov,pe,pg,pr,rf,rm,ro,"s ",ve,"y "}
(1 row)

SELECT show_bigm('木');
   show_bigm   
---------------
 {"木 "," 木"}
(1 row)

SELECT show_bigm('検索');
     show_bigm      
--------------------
 {検索,"索 "," 検"}
(1 row)

SELECT show_bigm('インデックスを作成');
                       show_bigm                       
-------------------------------------------------------
 {を作,イン,クス,スを,ック,デッ,ンデ,作成,"成 "," イ"}
(1 row)

SELECT show_bigm('pg_bigmは検索性能を200%向上させました');
                                                 show_bigm                                                  
------------------------------------------------------------------------------------------------------------
 {させ,した,せま,"た ",は検,まし,を2,上さ,向上,性能,検索,索性,能を," p",%向,0%,00,20,_b,bi,g_,gm,ig,mは,pg}
(1 row)

-- tests for creation of full-text search index
CREATE TABLE test_bigm (col1 text, col2 text);
CREATE INDEX test_bigm_idx ON test_bigm USING gin (col1 gin_bigm_ops);
INSERT INTO test_bigm VALUES ('pg_trgm - Tool that provides 3-gram full text search capability in PostgreSQL', 'pg_trgm');
INSERT INTO test_bigm VALUES ('pg_bigm - Tool that provides 2-gram full text search capability in PostgreSQL', 'pg_bigm');
INSERT INTO test_bigm VALUES ('pg_bigm has improved the full text search performance by 200%','pg_bigm performance');
INSERT INTO test_bigm VALUES ('You can create an index for full text search by using GIN index.', 'full text search');
INSERT INTO test_bigm VALUES ('\dx displays list of installed extensions', 'meta command');
INSERT INTO test_bigm VALUES ('\w FILE outputs the current query buffer to the file specified', 'meta command');
INSERT INTO test_bigm VALUES ('pg_trgm - PostgreSQLで3-gramの全文検索を使えるようにするツール', 'pg_trgm');
INSERT INTO test_bigm VALUES ('pg_bigm - PostgreSQLで2-gramの全文検索を使えるようにするツール', 'pg_bigm');
INSERT INTO test_bigm VALUES ('pg_bigmは検索性能を200%向上させました。', 'pg_bigm 検索性能');
INSERT INTO test_bigm VALUES ('GINインデックスを利用して全文検索用のインデックスを作成します。', '全文検索');
INSERT INTO test_bigm VALUES ('And she tore the dress in anger');
INSERT INTO test_bigm VALUES ('She sells sea shells on the sea shore');
INSERT INTO test_bigm VALUES ('Those orchids are very special to her');
INSERT INTO test_bigm VALUES ('Did you not see the wet floor sign?');
INSERT INTO test_bigm VALUES ('The stylist refused them politely');
INSERT INTO test_bigm VALUES ('You will get into deep trouble for staying out late');
INSERT INTO test_bigm VALUES ('He is awaiting trial');
INSERT INTO test_bigm VALUES ('It was a trivial mistake');
INSERT INTO test_bigm VALUES ('ここは東京都');
INSERT INTO test_bigm VALUES ('東京と京都に行く');
-- tests pg_gin_pending_stats
SELECT * FROM pg_gin_pending_stats('test_bigm_idx');
 pages | tuples 
-------+--------
     2 |     20
(1 row)

VACUUM;
SELECT * FROM pg_gin_pending_stats('test_bigm_idx');
 pages | tuples 
-------+--------
     0 |      0
(1 row)

-- tests for full-text search
EXPLAIN (COSTS off) SELECT col1 FROM test_bigm WHERE col1 LIKE likequery ('a');
                QUERY PLAN                 
-------------------------------------------
 Bitmap Heap Scan on test_bigm
   Recheck Cond: (col1 ~~ '%a%'::text)
   ->  Bitmap Index Scan on test_bigm_idx
         Index Cond: (col1 ~~ '%a%'::text)
(4 rows)

EXPLAIN (COSTS off) SELECT col1 FROM test_bigm WHERE col1 LIKE likequery ('am');
                 QUERY PLAN                 
--------------------------------------------
 Bitmap Heap Scan on test_bigm
   Recheck Cond: (col1 ~~ '%am%'::text)
   ->  Bitmap Index Scan on test_bigm_idx
         Index Cond: (col1 ~~ '%am%'::text)
(4 rows)

EXPLAIN (COSTS off) SELECT col1 FROM test_bigm WHERE col1 LIKE likequery ('GIN');
                 QUERY PLAN                  
---------------------------------------------
 Bitmap Heap Scan on test_bigm
   Recheck Cond: (col1 ~~ '%GIN%'::text)
   ->  Bitmap Index Scan on test_bigm_idx
         Index Cond: (col1 ~~ '%GIN%'::text)
(4 rows)

EXPLAIN (COSTS off) SELECT col1 FROM test_bigm WHERE col1 LIKE likequery ('bigm');
                  QUERY PLAN                  
----------------------------------------------
 Bitmap Heap Scan on test_bigm
   Recheck Cond: (col1 ~~ '%bigm%'::text)
   ->  Bitmap Index Scan on test_bigm_idx
         Index Cond: (col1 ~~ '%bigm%'::text)
(4 rows)

SELECT col1 FROM test_bigm WHERE col1 LIKE likequery (NULL);
 col1 
------
(0 rows)

SELECT col1 FROM test_bigm WHERE col1 LIKE likequery ('');
 col1 
------
(0 rows)

SELECT col1 FROM test_bigm WHERE col1 LIKE likequery ('%');
                             col1                              
---------------------------------------------------------------
 pg_bigm has improved the full text search performance by 200%
 pg_bigmは検索性能を200%向上させました。
(2 rows)

SELECT col1 FROM test_bigm WHERE col1 LIKE likequery ('\');
                              col1                              
----------------------------------------------------------------
 \dx displays list of installed extensions
 \w FILE outputs the current query buffer to the file specified
(2 rows)

SELECT col1 FROM test_bigm WHERE col1 LIKE likequery ('_');
                                     col1                                      
-------------------------------------------------------------------------------
 pg_trgm - Tool that provides 3-gram full text search capability in PostgreSQL
 pg_bigm - Tool that provides 2-gram full text search capability in PostgreSQL
 pg_bigm has improved the full text search performance by 200%
 pg_trgm - PostgreSQLで3-gramの全文検索を使えるようにするツール
 pg_bigm - PostgreSQLで2-gramの全文検索を使えるようにするツール
 pg_bigmは検索性能を200%向上させました。
(6 rows)

SELECT col1 FROM test_bigm WHERE col1 LIKE likequery ('\dx');
                   col1                    
-------------------------------------------
 \dx displays list of installed extensions
(1 row)

SELECT col1 FROM test_bigm WHERE col1 LIKE likequery ('pg_bigm');
                                     col1                                      
-------------------------------------------------------------------------------
 pg_bigm - Tool that provides 2-gram full text search capability in PostgreSQL
 pg_bigm has improved the full text search performance by 200%
 pg_bigm - PostgreSQLで2-gramの全文検索を使えるようにするツール
 pg_bigmは検索性能を200%向上させました。
(4 rows)

SELECT col1 FROM test_bigm WHERE col1 LIKE likequery ('200%');
                             col1                              
---------------------------------------------------------------
 pg_bigm has improved the full text search performance by 200%
 pg_bigmは検索性能を200%向上させました。
(2 rows)

SELECT col1 FROM test_bigm WHERE col1 LIKE likequery ('w');
                              col1                              
----------------------------------------------------------------
 \w FILE outputs the current query buffer to the file specified
 Did you not see the wet floor sign?
 You will get into deep trouble for staying out late
 He is awaiting trial
 It was a trivial mistake
(5 rows)

SELECT col1 FROM test_bigm WHERE col1 LIKE likequery ('by');
                               col1                               
------------------------------------------------------------------
 pg_bigm has improved the full text search performance by 200%
 You can create an index for full text search by using GIN index.
(2 rows)

SELECT col1 FROM test_bigm WHERE col1 LIKE likequery ('GIN');
                               col1                               
------------------------------------------------------------------
 You can create an index for full text search by using GIN index.
 GINインデックスを利用して全文検索用のインデックスを作成します。
(2 rows)

SELECT col1 FROM test_bigm WHERE col1 LIKE likequery ('tool');
 col1 
------
(0 rows)

SELECT col1 FROM test_bigm WHERE col1 LIKE likequery ('Tool');
                                     col1                                      
-------------------------------------------------------------------------------
 pg_trgm - Tool that provides 3-gram full text search capability in PostgreSQL
 pg_bigm - Tool that provides 2-gram full text search capability in PostgreSQL
(2 rows)

SELECT col1 FROM test_bigm WHERE col1 LIKE likequery ('performance');
                             col1                              
---------------------------------------------------------------
 pg_bigm has improved the full text search performance by 200%
(1 row)

EXPLAIN (COSTS off) SELECT col1 FROM test_bigm WHERE col1 LIKE likequery ('使');
                 QUERY PLAN                 
--------------------------------------------
 Bitmap Heap Scan on test_bigm
   Recheck Cond: (col1 ~~ '%使%'::text)
   ->  Bitmap Index Scan on test_bigm_idx
         Index Cond: (col1 ~~ '%使%'::text)
(4 rows)

EXPLAIN (COSTS off) SELECT col1 FROM test_bigm WHERE col1 LIKE likequery ('検索');
                  QUERY PLAN                  
----------------------------------------------
 Bitmap Heap Scan on test_bigm
   Recheck Cond: (col1 ~~ '%検索%'::text)
   ->  Bitmap Index Scan on test_bigm_idx
         Index Cond: (col1 ~~ '%検索%'::text)
(4 rows)

EXPLAIN (COSTS off) SELECT col1 FROM test_bigm WHERE col1 LIKE likequery ('ツール');
                   QUERY PLAN                   
------------------------------------------------
 Bitmap Heap Scan on test_bigm
   Recheck Cond: (col1 ~~ '%ツール%'::text)
   ->  Bitmap Index Scan on test_bigm_idx
         Index Cond: (col1 ~~ '%ツール%'::text)
(4 rows)

EXPLAIN (COSTS off) SELECT col1 FROM test_bigm WHERE col1 LIKE likequery ('全文検索');
                    QUERY PLAN                    
--------------------------------------------------
 Bitmap Heap Scan on test_bigm
   Recheck Cond: (col1 ~~ '%全文検索%'::text)
   ->  Bitmap Index Scan on test_bigm_idx
         Index Cond: (col1 ~~ '%全文検索%'::text)
(4 rows)

SELECT col1 FROM test_bigm WHERE col1 LIKE likequery ('使');
                              col1                              
----------------------------------------------------------------
 pg_trgm - PostgreSQLで3-gramの全文検索を使えるようにするツール
 pg_bigm - PostgreSQLで2-gramの全文検索を使えるようにするツール
(2 rows)

SELECT col1 FROM test_bigm WHERE col1 LIKE likequery ('検索');
                              col1                               
-----------------------------------------------------------------
 pg_trgm - PostgreSQLで3-gramの全文検索を使えるようにするツール
 pg_bigm - PostgreSQLで2-gramの全文検索を使えるようにするツール
 pg_bigmは検索性能を200%向上させました。
 GINインデックスを利用して全文検索用のインデックスを作成します。
(4 rows)

SELECT col1 FROM test_bigm WHERE col1 LIKE likequery ('ツール');
                              col1                              
----------------------------------------------------------------
 pg_trgm - PostgreSQLで3-gramの全文検索を使えるようにするツール
 pg_bigm - PostgreSQLで2-gramの全文検索を使えるようにするツール
(2 rows)

SELECT col1 FROM test_bigm WHERE col1 LIKE likequery ('インデックスを作成');
                              col1                               
-----------------------------------------------------------------
 GINインデックスを利用して全文検索用のインデックスを作成します。
(1 row)

SELECT col1 FROM test_bigm WHERE col1 LIKE likequery ('3-gramの全文検索');
                              col1                              
----------------------------------------------------------------
 pg_trgm - PostgreSQLで3-gramの全文検索を使えるようにするツール
(1 row)

-- check that the search results don't change if enable_recheck is disabled
-- in order to check that index full search is NOT executed
SET pg_bigm.enable_recheck = off;
SELECT col1 FROM test_bigm WHERE col1 LIKE likequery ('w');
                              col1                              
----------------------------------------------------------------
 \w FILE outputs the current query buffer to the file specified
 Did you not see the wet floor sign?
 You will get into deep trouble for staying out late
 He is awaiting trial
 It was a trivial mistake
(5 rows)

SELECT col1 FROM test_bigm WHERE col1 LIKE likequery ('by');
                               col1                               
------------------------------------------------------------------
 pg_bigm has improved the full text search performance by 200%
 You can create an index for full text search by using GIN index.
(2 rows)

SELECT col1 FROM test_bigm WHERE col1 LIKE likequery ('使');
                              col1                              
----------------------------------------------------------------
 pg_trgm - PostgreSQLで3-gramの全文検索を使えるようにするツール
 pg_bigm - PostgreSQLで2-gramの全文検索を使えるようにするツール
(2 rows)

SELECT col1 FROM test_bigm WHERE col1 LIKE likequery ('検索');
                              col1                               
-----------------------------------------------------------------
 pg_trgm - PostgreSQLで3-gramの全文検索を使えるようにするツール
 pg_bigm - PostgreSQLで2-gramの全文検索を使えるようにするツール
 pg_bigmは検索性能を200%向上させました。
 GINインデックスを利用して全文検索用のインデックスを作成します。
(4 rows)

SET pg_bigm.enable_recheck = on;
EXPLAIN (COSTS off) SELECT col1 FROM test_bigm WHERE col1 LIKE '%bigm%';
                  QUERY PLAN                  
----------------------------------------------
 Bitmap Heap Scan on test_bigm
   Recheck Cond: (col1 ~~ '%bigm%'::text)
   ->  Bitmap Index Scan on test_bigm_idx
         Index Cond: (col1 ~~ '%bigm%'::text)
(4 rows)

SELECT col1 FROM test_bigm WHERE col1 LIKE '%Tool%';
                                     col1                                      
-------------------------------------------------------------------------------
 pg_trgm - Tool that provides 3-gram full text search capability in PostgreSQL
 pg_bigm - Tool that provides 2-gram full text search capability in PostgreSQL
(2 rows)

SELECT col1 FROM test_bigm WHERE col1 LIKE '%検索%';
                              col1                               
-----------------------------------------------------------------
 pg_trgm - PostgreSQLで3-gramの全文検索を使えるようにするツール
 pg_bigm - PostgreSQLで2-gramの全文検索を使えるようにするツール
 pg_bigmは検索性能を200%向上させました。
 GINインデックスを利用して全文検索用のインデックスを作成します。
(4 rows)

EXPLAIN (COSTS off) SELECT col1 FROM test_bigm WHERE col1 LIKE '%\%';
                QUERY PLAN                 
-------------------------------------------
 Bitmap Heap Scan on test_bigm
   Recheck Cond: (col1 ~~ '%\%'::text)
   ->  Bitmap Index Scan on test_bigm_idx
         Index Cond: (col1 ~~ '%\%'::text)
(4 rows)

SELECT col1 FROM test_bigm WHERE col1 LIKE '%\%';
                             col1                              
---------------------------------------------------------------
 pg_bigm has improved the full text search performance by 200%
(1 row)

EXPLAIN (COSTS off) SELECT col1 FROM test_bigm WHERE col1 LIKE 'pg\___gm%';
                   QUERY PLAN                    
-------------------------------------------------
 Bitmap Heap Scan on test_bigm
   Recheck Cond: (col1 ~~ 'pg\___gm%'::text)
   ->  Bitmap Index Scan on test_bigm_idx
         Index Cond: (col1 ~~ 'pg\___gm%'::text)
(4 rows)

SELECT col1 FROM test_bigm WHERE col1 LIKE 'pg\___gm%';
                                     col1                                      
-------------------------------------------------------------------------------
 pg_trgm - Tool that provides 3-gram full text search capability in PostgreSQL
 pg_bigm - Tool that provides 2-gram full text search capability in PostgreSQL
 pg_bigm has improved the full text search performance by 200%
 pg_trgm - PostgreSQLで3-gramの全文検索を使えるようにするツール
 pg_bigm - PostgreSQLで2-gramの全文検索を使えるようにするツール
 pg_bigmは検索性能を200%向上させました。
(6 rows)

-- tests for pg_bigm.enable_recheck
SELECT col1 FROM test_bigm WHERE col1 LIKE likequery('trial');
         col1         
----------------------
 He is awaiting trial
(1 row)

SELECT col1 FROM test_bigm WHERE col1 LIKE likequery('東京都');
     col1     
--------------
 ここは東京都
(1 row)

SET pg_bigm.enable_recheck = off;
SELECT col1 FROM test_bigm WHERE col1 LIKE likequery('trial');
           col1           
--------------------------
 He is awaiting trial
 It was a trivial mistake
(2 rows)

SELECT col1 FROM test_bigm WHERE col1 LIKE likequery('東京都');
       col1       
------------------
 ここは東京都
 東京と京都に行く
(2 rows)

-- tests for pg_bigm.gin_key_limit
SELECT col1 FROM test_bigm WHERE col1 LIKE likequery('she tore');
              col1               
---------------------------------
 And she tore the dress in anger
(1 row)

SET pg_bigm.gin_key_limit = 6;
SELECT col1 FROM test_bigm WHERE col1 LIKE likequery('she tore');
                 col1                  
---------------------------------------
 And she tore the dress in anger
 She sells sea shells on the sea shore
(2 rows)

SET pg_bigm.gin_key_limit = 5;
SELECT col1 FROM test_bigm WHERE col1 LIKE likequery('she tore');
                 col1                  
---------------------------------------
 And she tore the dress in anger
 She sells sea shells on the sea shore
 Those orchids are very special to her
(3 rows)

SET pg_bigm.gin_key_limit = 4;
SELECT col1 FROM test_bigm WHERE col1 LIKE likequery('she tore');
                             col1                              
---------------------------------------------------------------
 pg_bigm has improved the full text search performance by 200%
 And she tore the dress in anger
 She sells sea shells on the sea shore
 Those orchids are very special to her
 Did you not see the wet floor sign?
(5 rows)

SET pg_bigm.gin_key_limit = 3;
SELECT col1 FROM test_bigm WHERE col1 LIKE likequery('she tore');
                              col1                              
----------------------------------------------------------------
 pg_bigm has improved the full text search performance by 200%
 \w FILE outputs the current query buffer to the file specified
 And she tore the dress in anger
 She sells sea shells on the sea shore
 Those orchids are very special to her
 Did you not see the wet floor sign?
 The stylist refused them politely
(7 rows)

SET pg_bigm.gin_key_limit = 2;
SELECT col1 FROM test_bigm WHERE col1 LIKE likequery('she tore');
                               col1                               
------------------------------------------------------------------
 pg_bigm has improved the full text search performance by 200%
 You can create an index for full text search by using GIN index.
 \w FILE outputs the current query buffer to the file specified
 And she tore the dress in anger
 She sells sea shells on the sea shore
 Those orchids are very special to her
 Did you not see the wet floor sign?
 The stylist refused them politely
 You will get into deep trouble for staying out late
 He is awaiting trial
 It was a trivial mistake
(11 rows)

SET pg_bigm.gin_key_limit = 1;
SELECT col1 FROM test_bigm WHERE col1 LIKE likequery('she tore');
                                     col1                                      
-------------------------------------------------------------------------------
 pg_trgm - Tool that provides 3-gram full text search capability in PostgreSQL
 pg_bigm - Tool that provides 2-gram full text search capability in PostgreSQL
 pg_bigm has improved the full text search performance by 200%
 You can create an index for full text search by using GIN index.
 \w FILE outputs the current query buffer to the file specified
 And she tore the dress in anger
 She sells sea shells on the sea shore
 Those orchids are very special to her
 Did you not see the wet floor sign?
 The stylist refused them politely
 You will get into deep trouble for staying out late
 He is awaiting trial
 It was a trivial mistake
(13 rows)

SET pg_bigm.enable_recheck = on;
SET pg_bigm.gin_key_limit = 0;
-- tests with standard_conforming_strings disabled
SET standard_conforming_strings = off;
SELECT likequery('\\_%');
 likequery 
-----------
 %\\\_\%%
(1 row)

SELECT show_bigm('\\_%');
       show_bigm       
-----------------------
 {" \\","% ","\\_",_%}
(1 row)

SELECT col1 FROM test_bigm WHERE col1 LIKE likequery ('\\');
                              col1                              
----------------------------------------------------------------
 \dx displays list of installed extensions
 \w FILE outputs the current query buffer to the file specified
(2 rows)

SELECT col1 FROM test_bigm WHERE col1 LIKE likequery ('\\dx');
                   col1                    
-------------------------------------------
 \dx displays list of installed extensions
(1 row)

SELECT col1 FROM test_bigm WHERE col1 LIKE likequery ('200%');
                             col1                              
---------------------------------------------------------------
 pg_bigm has improved the full text search performance by 200%
 pg_bigmは検索性能を200%向上させました。
(2 rows)

-- tests for full text search with multi-column index
CREATE INDEX test_bigm_multi_idx ON test_bigm USING gin (col1 gin_bigm_ops, col2 gin_bigm_ops);
-- keyword exists only in col1. Query on col2 must not return any rows.
EXPLAIN (COSTS off) SELECT * FROM test_bigm WHERE col2 LIKE likequery('query');
                   QUERY PLAN                   
------------------------------------------------
 Bitmap Heap Scan on test_bigm
   Recheck Cond: (col2 ~~ '%query%'::text)
   ->  Bitmap Index Scan on test_bigm_multi_idx
         Index Cond: (col2 ~~ '%query%'::text)
(4 rows)

SELECT * FROM test_bigm WHERE col2 LIKE likequery('query');
 col1 | col2 
------+------
(0 rows)

-- keyword exists only in col2. All rows with keyword in col2 are returned.
EXPLAIN (COSTS off) SELECT * FROM test_bigm WHERE col2 LIKE likequery('meta');
                   QUERY PLAN                   
------------------------------------------------
 Bitmap Heap Scan on test_bigm
   Recheck Cond: (col2 ~~ '%meta%'::text)
   ->  Bitmap Index Scan on test_bigm_multi_idx
         Index Cond: (col2 ~~ '%meta%'::text)
(4 rows)

SELECT * FROM test_bigm WHERE col2 LIKE likequery('meta');
                              col1                              |     col2     
----------------------------------------------------------------+--------------
 \dx displays list of installed extensions                      | meta command
 \w FILE outputs the current query buffer to the file specified | meta command
(2 rows)

-- keyword exists in both columns. Query on col2 must not return rows with keyword in col1 only.
EXPLAIN (COSTS off) SELECT * FROM test_bigm WHERE col2 LIKE likequery('bigm');
                   QUERY PLAN                   
------------------------------------------------
 Bitmap Heap Scan on test_bigm
   Recheck Cond: (col2 ~~ '%bigm%'::text)
   ->  Bitmap Index Scan on test_bigm_multi_idx
         Index Cond: (col2 ~~ '%bigm%'::text)
(4 rows)

SELECT * FROM test_bigm WHERE col2 LIKE likequery('bigm');
                                     col1                                      |        col2         
-------------------------------------------------------------------------------+---------------------
 pg_bigm - Tool that provides 2-gram full text search capability in PostgreSQL | pg_bigm
 pg_bigm has improved the full text search performance by 200%                 | pg_bigm performance
 pg_bigm - PostgreSQLで2-gramの全文検索を使えるようにするツール                | pg_bigm
 pg_bigmは検索性能を200%向上させました。                                       | pg_bigm 検索性能
(4 rows)

-- tests for bigm_similarity
SELECT bigm_similarity('wow', NULL);
 bigm_similarity 
-----------------
          (null)
(1 row)

SELECT bigm_similarity('wow', '');
 bigm_similarity 
-----------------
               0
(1 row)

SELECT bigm_similarity('wow', 'WOWa ');
 bigm_similarity 
-----------------
               0
(1 row)

SELECT bigm_similarity('wow', ' WOW ');
 bigm_similarity 
-----------------
               0
(1 row)

SELECT bigm_similarity('wow', ' wow ');
 bigm_similarity 
-----------------
               1
(1 row)

SELECT bigm_similarity('---', '####---');
 bigm_similarity 
-----------------
             0.4
(1 row)

SELECT bigm_similarity('東京都', ' 東京都 ');
 bigm_similarity 
-----------------
               1
(1 row)

SELECT bigm_similarity('東京都', '東京と京都');
 bigm_similarity 
-----------------
        0.666667
(1 row)

SELECT bigm_similarity('東京と京都', '東京都');
 bigm_similarity 
-----------------
        0.666667
(1 row)

-- tests for drop of pg_bigm
DROP EXTENSION pg_bigm CASCADE;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to index test_bigm_idx
drop cascades to index test_bigm_multi_idx
SELECT likequery('test');
ERROR:  function likequery(unknown) does not exist
LINE 1: SELECT likequery('test');
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
